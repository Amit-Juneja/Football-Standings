/* tslint:disable */
/* eslint-disable */
/**
 * Football Standings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorModel,
  GetStandings200Response,
} from '../models/index';
import {
    ErrorModelFromJSON,
    ErrorModelToJSON,
    GetStandings200ResponseFromJSON,
    GetStandings200ResponseToJSON,
} from '../models/index';

export interface GetStandingsRequest {
    league: string;
}

/**
 * 
 */
export class StandingsApi extends runtime.BaseAPI {

    /**
     * Fetch standings for a football team based on country, league, and team name.
     * Get football standings
     */
    async getStandingsRaw(requestParameters: GetStandingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStandings200Response>> {
        if (requestParameters.league === null || requestParameters.league === undefined) {
            throw new runtime.RequiredError('league','Required parameter requestParameters.league was null or undefined when calling getStandings.');
        }

        const queryParameters: any = {};

        if (requestParameters.league !== undefined) {
            queryParameters['league'] = requestParameters.league;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/standings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStandings200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch standings for a football team based on country, league, and team name.
     * Get football standings
     */
    async getStandings(requestParameters: GetStandingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStandings200Response> {
        const response = await this.getStandingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
